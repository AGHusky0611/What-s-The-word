module Player {
  // Exceptions
  exception AuthenticationError { string reason; };
  exception InvalidGuess       { string reason; };
  exception GameError          { string reason; };
  exception NotFoundError      { string reason; };
  exception ValidationError    { string reason; };

  // Data structures
  struct UserCredentials {
    string username;
    string password;
  };

  struct UserInfo {
    string username;
    boolean isAdmin;
  };

  struct GameSessionInfo {
    string sessionId;
    sequence<UserInfo> players;  // Will be typedef'd below
    string currentWord;
    long remainingAttempts;
  };

  // Sequence type definitions
  typedef sequence<UserInfo> UserInfoSeq;
  typedef sequence<long> PositionSequence;
  typedef sequence<string> StringSequence;

  // Player client interfaces
  interface UserManager {
    string login(in UserCredentials creds)
      raises (AuthenticationError);
    string logout(in string token)
      raises (AuthenticationError);
    UserInfo getUserInfo(in string token)
      raises (AuthenticationError);
  };

  interface GameLobby {
    string joinLobby(in string token)
      raises (AuthenticationError, ValidationError);
    string leaveLobby(in string token)
      raises (AuthenticationError);
    // Return list of waiting players
    UserInfoSeq getWaitingPlayers()
      raises (GameError);
  };

  interface HangmanGame {
    string newGame(in string sessionId)
      raises (GameError, NotFoundError);
    string guess(in string sessionId, in char letter)
      raises (InvalidGuess, GameError, NotFoundError);
    string getStatus(in string sessionId)
      raises (GameError, NotFoundError);
    long getRemainingAttempts(in string sessionId)
      raises (GameError, NotFoundError);
    string getGuessedLetters(in string sessionId)
      raises (GameError, NotFoundError);
    boolean isGameOver(in string sessionId)
      raises (GameError, NotFoundError);
    boolean isGameWon(in string sessionId)
      raises (GameError, NotFoundError);
    string getSecretWord(in string sessionId)
      raises (GameError, NotFoundError);
  };

  interface Leaderboard {
    UserInfoSeq getTopPlayers(in long topN)
      raises (GameError);
  };

  // Callback interface for server-to-client notifications
  interface PlayerOperations {
    oneway void notifyGameStart(in string gameId, in long wordLength);
    oneway void notifyLetterResult(in char letter, in boolean isCorrect, in PositionSequence positions);
    oneway void notifyGameEnd(in string winnerUsername);
    oneway void notifyWaitingForPlayers(in long secondsRemaining);
  };

  // Main game server interface
  interface GameServer {
    // Register player callback and start receiving notifications
    boolean registerPlayer(in string username, in PlayerOperations playerRef)
      raises (ValidationError, AuthenticationError);
    boolean submitGuess(in string gameId, in char letter)
      raises (InvalidGuess, GameError, NotFoundError);
    // Retrieve the leaderboard (usernames)
    StringSequence getLeaderboard(in long topN)
      raises (GameError);
  };
};
