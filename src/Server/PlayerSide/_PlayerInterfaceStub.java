package Server.PlayerSide;


/**
* Server/PlayerSide/_PlayerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PlayerInterface.idl
* Tuesday, May 13, 2025 4:19:17 AM SGT
*/

public class _PlayerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements PlayerInterface
{


  // Authentication
  public String login (Server.CommonInterface.CallBackInterface cb, String username, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.AlreadyLoggedInException, Server.Exceptions.UserIsBannedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                Server.CommonInterface.CallBackInterfaceHelper.write ($out, cb);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/AlreadyLoggedInException:1.0"))
                    throw Server.Exceptions.AlreadyLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/UserIsBannedException:1.0"))
                    throw Server.Exceptions.UserIsBannedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return login (cb, username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // login

  public void logout (String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logout", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                logout (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // logout


  // Lobby management
  public GameSession createLobby (Server.CommonObjects.User host, String lobbyName, Server.CommonObjects.GameRules rules) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.SessionAlreadyMadeException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createLobby", true);
                Server.CommonObjects.UserHelper.write ($out, host);
                $out.write_string (lobbyName);
                Server.CommonObjects.GameRulesHelper.write ($out, rules);
                $in = _invoke ($out);
                GameSession $result = GameSessionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/SessionAlreadyMadeException:1.0"))
                    throw Server.Exceptions.SessionAlreadyMadeExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createLobby (host, lobbyName, rules        );
            } finally {
                _releaseReply ($in);
            }
  } // createLobby

  public GameSession joinLobby (String lobbyId, Server.CommonObjects.User player) throws Server.Exceptions.LostConnectionException, Server.Exceptions.SessionNotFoundException, Server.Exceptions.SessionFullException, Server.Exceptions.PlayerAlreadyInSessionException, Server.Exceptions.UserIsBannedException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("joinLobby", true);
                $out.write_string (lobbyId);
                Server.CommonObjects.UserHelper.write ($out, player);
                $in = _invoke ($out);
                GameSession $result = GameSessionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/SessionNotFoundException:1.0"))
                    throw Server.Exceptions.SessionNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/SessionFullException:1.0"))
                    throw Server.Exceptions.SessionFullExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/PlayerAlreadyInSessionException:1.0"))
                    throw Server.Exceptions.PlayerAlreadyInSessionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/UserIsBannedException:1.0"))
                    throw Server.Exceptions.UserIsBannedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return joinLobby (lobbyId, player        );
            } finally {
                _releaseReply ($in);
            }
  } // joinLobby

  public GameSession randomConnect (Server.CommonObjects.User user) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSessionsFoundException, Server.Exceptions.SessionFullException, Server.Exceptions.PlayerAlreadyInSessionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("randomConnect", true);
                Server.CommonObjects.UserHelper.write ($out, user);
                $in = _invoke ($out);
                GameSession $result = GameSessionHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSessionsFoundException:1.0"))
                    throw Server.Exceptions.NoSessionsFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/SessionFullException:1.0"))
                    throw Server.Exceptions.SessionFullExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/PlayerAlreadyInSessionException:1.0"))
                    throw Server.Exceptions.PlayerAlreadyInSessionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return randomConnect (user        );
            } finally {
                _releaseReply ($in);
            }
  } // randomConnect

  public void disconnect (String sessionId, String playerId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.SessionNotFoundException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("disconnect", true);
                $out.write_string (sessionId);
                $out.write_string (playerId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/SessionNotFoundException:1.0"))
                    throw Server.Exceptions.SessionNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                disconnect (sessionId, playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // disconnect

  public Server.CommonObjects.LobbyInfo[] getAvailableLobbies () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSessionsFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAvailableLobbies", true);
                $in = _invoke ($out);
                Server.CommonObjects.LobbyInfo $result[] = LobbyListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSessionsFoundException:1.0"))
                    throw Server.Exceptions.NoSessionsFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAvailableLobbies (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAvailableLobbies


  // Game stats
  public String getWinRatio (String playerId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSuchUserFoundException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getWinRatio", true);
                $out.write_string (playerId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getWinRatio (playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // getWinRatio

  public Server.CommonObjects.GameResult[] getGameHistory (String playerId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGameHistory", true);
                $out.write_string (playerId);
                $in = _invoke ($out);
                Server.CommonObjects.GameResult $result[] = GameHistoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGameHistory (playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // getGameHistory


  // Connection
  public String ping (String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ping (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // ping

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/PlayerSide/PlayerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "Server.PlayerSide._PlayerInterfaceStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _PlayerInterfaceStub
