package Server.PlayerSide;


/**
* Server/PlayerSide/_GameSessionStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PlayerInterface.idl
* Tuesday, May 13, 2025 4:19:17 AM SGT
*/

public class _GameSessionStub extends org.omg.CORBA.portable.ObjectImpl implements GameSession
{


  // Game management
  public void startGame () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NotEnoughPlayersException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGame", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotEnoughPlayersException:1.0"))
                    throw Server.Exceptions.NotEnoughPlayersExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startGame (        );
            } finally {
                _releaseReply ($in);
            }
  } // startGame

  public void endGame () throws Server.Exceptions.SessionNotFoundException, Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("endGame", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/SessionNotFoundException:1.0"))
                    throw Server.Exceptions.SessionNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                endGame (        );
            } finally {
                _releaseReply ($in);
            }
  } // endGame


  // Gameplay
  public void guess (String guessingPlayer, char letter) throws Server.Exceptions.NotYourTurnException, Server.Exceptions.WrongGuessException, Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("guess", true);
                $out.write_string (guessingPlayer);
                $out.write_char (letter);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/NotYourTurnException:1.0"))
                    throw Server.Exceptions.NotYourTurnExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/WrongGuessException:1.0"))
                    throw Server.Exceptions.WrongGuessExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                guess (guessingPlayer, letter        );
            } finally {
                _releaseReply ($in);
            }
  } // guess

  public String getCurrentWordState () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCurrentWordState", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getCurrentWordState (        );
            } finally {
                _releaseReply ($in);
            }
  } // getCurrentWordState

  public String selectWord () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("selectWord", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return selectWord (        );
            } finally {
                _releaseReply ($in);
            }
  } // selectWord


  // Player management
  public void addPlayer (Server.CommonObjects.User user) throws Server.Exceptions.SessionFullException, Server.Exceptions.PlayerAlreadyInSessionException, Server.Exceptions.UserIsBannedException, Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addPlayer", true);
                Server.CommonObjects.UserHelper.write ($out, user);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/SessionFullException:1.0"))
                    throw Server.Exceptions.SessionFullExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/PlayerAlreadyInSessionException:1.0"))
                    throw Server.Exceptions.PlayerAlreadyInSessionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/UserIsBannedException:1.0"))
                    throw Server.Exceptions.UserIsBannedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addPlayer (user        );
            } finally {
                _releaseReply ($in);
            }
  } // addPlayer

  public void removePlayer (String playerId) throws Server.Exceptions.NoSuchUserFoundException, Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removePlayer", true);
                $out.write_string (playerId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                removePlayer (playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // removePlayer


  // Status
  public String ping (Server.CommonObjects.User user) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                Server.CommonObjects.UserHelper.write ($out, user);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ping (user        );
            } finally {
                _releaseReply ($in);
            }
  } // ping

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/PlayerSide/GameSession:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "Server.PlayerSide._GameSessionStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GameSessionStub
