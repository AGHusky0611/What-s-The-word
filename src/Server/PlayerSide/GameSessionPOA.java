package Server.PlayerSide;


/**
* Server/PlayerSide/GameSessionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PlayerInterface.idl
* Tuesday, May 13, 2025 4:19:17 AM SGT
*/

public abstract class GameSessionPOA extends org.omg.PortableServer.Servant
 implements GameSessionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("startGame", new Integer (0));
    _methods.put ("endGame", new Integer (1));
    _methods.put ("guess", new Integer (2));
    _methods.put ("getCurrentWordState", new Integer (3));
    _methods.put ("selectWord", new Integer (4));
    _methods.put ("addPlayer", new Integer (5));
    _methods.put ("removePlayer", new Integer (6));
    _methods.put ("ping", new Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Game management
       case 0:  // Server/PlayerSide/GameSession/startGame
       {
         try {
           this.startGame ();
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotEnoughPlayersException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotEnoughPlayersExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // Server/PlayerSide/GameSession/endGame
       {
         try {
           this.endGame ();
           out = $rh.createReply();
         } catch (Server.Exceptions.SessionNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.SessionNotFoundExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Gameplay
       case 2:  // Server/PlayerSide/GameSession/guess
       {
         try {
           String guessingPlayer = in.read_string ();
           char letter = in.read_char ();
           this.guess (guessingPlayer, letter);
           out = $rh.createReply();
         } catch (Server.Exceptions.NotYourTurnException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotYourTurnExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.WrongGuessException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.WrongGuessExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // Server/PlayerSide/GameSession/getCurrentWordState
       {
         try {
           String $result = null;
           $result = this.getCurrentWordState ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // Server/PlayerSide/GameSession/selectWord
       {
         try {
           String $result = null;
           $result = this.selectWord ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Player management
       case 5:  // Server/PlayerSide/GameSession/addPlayer
       {
         try {
           Server.CommonObjects.User user = Server.CommonObjects.UserHelper.read (in);
           this.addPlayer (user);
           out = $rh.createReply();
         } catch (Server.Exceptions.SessionFullException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.SessionFullExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.PlayerAlreadyInSessionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.PlayerAlreadyInSessionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.UserIsBannedException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.UserIsBannedExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // Server/PlayerSide/GameSession/removePlayer
       {
         try {
           String playerId = in.read_string ();
           this.removePlayer (playerId);
           out = $rh.createReply();
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Status
       case 7:  // Server/PlayerSide/GameSession/ping
       {
         try {
           Server.CommonObjects.User user = Server.CommonObjects.UserHelper.read (in);
           String $result = null;
           $result = this.ping (user);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/PlayerSide/GameSession:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameSession _this() 
  {
    return GameSessionHelper.narrow(
    super._this_object());
  }

  public GameSession _this(org.omg.CORBA.ORB orb) 
  {
    return GameSessionHelper.narrow(
    super._this_object(orb));
  }


} // class GameSessionPOA
