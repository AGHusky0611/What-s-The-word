package GameServer;


/**
* GameServer/GameServerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameServer.idl
* Thursday, May 8, 2025 3:32:52 PM SGT
*/

public abstract class GameServerInterfacePOA extends org.omg.PortableServer.Servant
 implements GameServer.GameServerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("authenticate", new java.lang.Integer (0));
    _methods.put ("logout", new java.lang.Integer (1));
    _methods.put ("verifyCredentials", new java.lang.Integer (2));
    _methods.put ("generateUniqueToken", new java.lang.Integer (3));
    _methods.put ("validateToken", new java.lang.Integer (4));
    _methods.put ("createGame", new java.lang.Integer (5));
    _methods.put ("joinGame", new java.lang.Integer (6));
    _methods.put ("cancelGame", new java.lang.Integer (7));
    _methods.put ("submitGuess", new java.lang.Integer (8));
    _methods.put ("getGameStatus", new java.lang.Integer (9));
    _methods.put ("getLeaderboard", new java.lang.Integer (10));
    _methods.put ("addPlayer", new java.lang.Integer (11));
    _methods.put ("removePlayer", new java.lang.Integer (12));
    _methods.put ("updatePlayer", new java.lang.Integer (13));
    _methods.put ("searchPlayer", new java.lang.Integer (14));
    _methods.put ("setWaitingTime", new java.lang.Integer (15));
    _methods.put ("setRoundDuration", new java.lang.Integer (16));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Authentication methods
       case 0:  // GameServer/GameServerInterface/authenticate
       {
         String username = in.read_string ();
         String password = in.read_string ();
         String $result = null;
         $result = this.authenticate (username, password);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // GameServer/GameServerInterface/logout
       {
         String username = in.read_string ();
         this.logout (username);
         out = $rh.createReply();
         break;
       }

       case 2:  // GameServer/GameServerInterface/verifyCredentials
       {
         String username = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.verifyCredentials (username, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // GameServer/GameServerInterface/generateUniqueToken
       {
         String $result = null;
         $result = this.generateUniqueToken ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // GameServer/GameServerInterface/validateToken
       {
         String token = in.read_string ();
         String $result = null;
         $result = this.validateToken (token);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Game management methods
       case 5:  // GameServer/GameServerInterface/createGame
       {
         String token = in.read_string ();
         String $result = null;
         $result = this.createGame (token);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // GameServer/GameServerInterface/joinGame
       {
         String token = in.read_string ();
         String gameId = in.read_string ();
         boolean $result = false;
         $result = this.joinGame (token, gameId);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 7:  // GameServer/GameServerInterface/cancelGame
       {
         String token = in.read_string ();
         String gameId = in.read_string ();
         this.cancelGame (token, gameId);
         out = $rh.createReply();
         break;
       }


  // Game play methods
       case 8:  // GameServer/GameServerInterface/submitGuess
       {
         String token = in.read_string ();
         String gameId = in.read_string ();
         char letter = in.read_char ();
         boolean $result = false;
         $result = this.submitGuess (token, gameId, letter);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 9:  // GameServer/GameServerInterface/getGameStatus
       {
         String token = in.read_string ();
         String gameId = in.read_string ();
         String $result = null;
         $result = this.getGameStatus (token, gameId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Leaderboard methods
       case 10:  // GameServer/GameServerInterface/getLeaderboard
       {
         String $result = null;
         $result = this.getLeaderboard ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Admin methods
       case 11:  // GameServer/GameServerInterface/addPlayer
       {
         String token = in.read_string ();
         String username = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.addPlayer (token, username, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 12:  // GameServer/GameServerInterface/removePlayer
       {
         String token = in.read_string ();
         String username = in.read_string ();
         boolean $result = false;
         $result = this.removePlayer (token, username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 13:  // GameServer/GameServerInterface/updatePlayer
       {
         String token = in.read_string ();
         String username = in.read_string ();
         String newPassword = in.read_string ();
         boolean $result = false;
         $result = this.updatePlayer (token, username, newPassword);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 14:  // GameServer/GameServerInterface/searchPlayer
       {
         String token = in.read_string ();
         String searchTerm = in.read_string ();
         String $result = null;
         $result = this.searchPlayer (token, searchTerm);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 15:  // GameServer/GameServerInterface/setWaitingTime
       {
         String token = in.read_string ();
         int seconds = in.read_long ();
         boolean $result = false;
         $result = this.setWaitingTime (token, seconds);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 16:  // GameServer/GameServerInterface/setRoundDuration
       {
         String token = in.read_string ();
         int seconds = in.read_long ();
         boolean $result = false;
         $result = this.setRoundDuration (token, seconds);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:GameServer/GameServerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameServerInterface _this() 
  {
    return GameServerInterfaceHelper.narrow(
    super._this_object());
  }

  public GameServerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return GameServerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class GameServerInterfacePOA
